FROM buildpack-deps:jammy

COPY postgresql/* ./
ADD mysql/* ./
ADD mongodb/* ./
ADD wrk/* ./

ENV DEBIAN_FRONTEND noninteractive
RUN echo 'debconf debconf/frontend select Noninteractive' | debconf-set-selections

# prepare PostgreSQL APT repository
RUN cp pgdg.list /etc/apt/sources.list.d/
RUN wget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | apt-key add -

# prepare mysql APT repository
#RUN cp mysql.list /etc/apt/sources.list.d/
#RUN apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys 9578539176BAFBC6


RUN apt-get -yqq update > /dev/null
RUN apt-get -yqq install dirmngr gnupg apt-transport-https ca-certificates software-properties-common locales autoconf-archive autoconf automake libtool gcc g++ cmake unzip libpcre3-dev zlib1g-dev \
	libpq-dev libssl-dev uuid-dev odbc-postgresql unixodbc unixodbc-dev libcurl4-openssl-dev libmemcached-dev wget netcat \
	memcached redis-server gdb ninja-build telnet net-tools vim

#POSTGRESQL
ENV PG_VERSION 14
RUN locale-gen en_US.UTF-8
ENV LANG en_US.UTF-8
ENV LANGUAGE en_US:en
ENV LC_ALL en_US.UTF-8
ENV DEBIAN_FRONTEND noninteractive

# install postgresql on database machine
RUN apt-get -yqq update && apt-get -yqq install -o Dpkg::Options::="--force-confdef" -o Dpkg::Options::="--force-confold" postgresql-${PG_VERSION} postgresql-contrib-${PG_VERSION} &&  rm -rf /var/lib/apt/lists/*

# Make sure all the configuration files in main belong to postgres
RUN sed -i "s|PG_VERSION|${PG_VERSION}|g" postgresql.conf 
RUN mv postgresql.conf /etc/postgresql/${PG_VERSION}/main/postgresql.conf
RUN mv pg_hba.conf /etc/postgresql/${PG_VERSION}/main/pg_hba.conf

RUN chown -Rf postgres:postgres /etc/postgresql/${PG_VERSION}/main

RUN mkdir /ssd
RUN cp -R -p /var/lib/postgresql/${PG_VERSION}/main /ssd/postgresql
RUN cp /etc/postgresql/${PG_VERSION}/main/postgresql.conf /ssd/postgresql
RUN mv 60-postgresql-shm.conf /etc/sysctl.d/60-postgresql-shm.conf

RUN chown -Rf postgres:postgres /var/run/postgresql
RUN chmod 2777 /var/run/postgresql
RUN chown postgres:postgres /etc/sysctl.d/60-postgresql-shm.conf
RUN chown postgres:postgres create-postgres*
RUN chown -Rf postgres:postgres /ssd

ENV PGDATA=/ssd/postgresql

USER postgres

# We have to wait for postgres to start before we can use the cli
RUN service postgresql start && \
    until psql -c "\q"; do sleep 1; done && \
    psql < create-postgres-database.sql && \
    psql -a hello_world < create-postgres.sql && \
    service postgresql stop
#POSTGRESQL

USER root

#Install libcuckoo headers
WORKDIR /tmp
RUN wget -q https://github.com/efficient/libcuckoo/archive/master.zip
RUN unzip -qq master.zip
RUN rm -f master.zip
WORKDIR /tmp/libcuckoo-master
RUN cmake -DCMAKE_INSTALL_PREFIX=/usr/local/ .
RUN make install
WORKDIR /tmp
RUN rm -rf /tmp/libcuckoo-master

RUN wget -q https://github.com/redis/hiredis/archive/v1.0.0.tar.gz
RUN tar xf v1.0.0.tar.gz
RUN rm -f v1.0.0.tar.gz
RUN cd hiredis-1.0.0/ && cmake . && make install
WORKDIR /tmp
RUN rm -rf hiredis-1.0.0

RUN wget -q https://github.com/sewenew/redis-plus-plus/archive/refs/tags/1.3.3.tar.gz
RUN tar xf 1.3.3.tar.gz
RUN rm -f 1.3.3.tar.gz
WORKDIR redis-plus-plus-1.3.3/
RUN mkdir build
WORKDIR build
RUN cmake -DREDIS_PLUS_PLUS_CXX_STANDARD=17 .. && make && make install
WORKDIR /tmp
RUN rm -rf redis-plus-plus-1.3.3

#WRK
WORKDIR /tmp/wrk
RUN apt-get -yqq update && apt-get -yqq install libluajit-5.1-dev libssl-dev luajit && rm -rf /var/lib/apt/lists/* && \
	curl -sL https://github.com/wg/wrk/archive/4.1.0.tar.gz | tar xz --strip-components=1
ENV LDFLAGS="-O3 -march=native -flto"
ENV CFLAGS="-I /usr/include/luajit-2.1 $LDFLAGS"
RUN make WITH_LUAJIT=/usr WITH_OPENSSL=/usr -j "$(nproc)"
RUN cp wrk /usr/local/bin

ENV name name
ENV server_host server_host
ENV levels levels
ENV duration duration
ENV max_concurrency max_concurrency
ENV max_threads max_threads
ENV pipeline pipeline
ENV accept accept
#WRK

WORKDIR /tmp
RUN wget -q https://github.com/axboe/liburing/archive/liburing-2.2.tar.gz
RUN tar xf liburing-2.2.tar.gz
RUN rm -f liburing-2.2.tar.gz
RUN cd liburing-liburing-2.2 && ./configure --prefix=/usr/local && make install
RUN cd /tmp && rm -rf liburing-liburing-2.2

#Install ffead-cpp
WORKDIR /tmp
RUN wget -q https://github.com/sumeetchhetri/ffead-cpp/archive/master.zip
RUN unzip -qq master.zip
RUN mv ffead-cpp-master ffead-cpp-src
RUN rm -f master.zip

WORKDIR /tmp/ffead-cpp-src
RUN rm -rf src web rtdcf script
COPY src /tmp/ffead-cpp-src/src
COPY web /tmp/ffead-cpp-src/web
COPY rtdcf /tmp/ffead-cpp-src/rtdcf
COPY script /tmp/ffead-cpp-src/script
COPY resources /tmp/ffead-cpp-src/resources
COPY CMakeLists.txt /tmp/ffead-cpp-src/
COPY server.sh /server_orig.sh
COPY *.sh pipeline.lua /
RUN sed -i 's|add_subdirectory(${PROJECT_SOURCE_DIR}/web/default)||g' CMakeLists.txt && \
	sed -i 's|add_subdirectory(${PROJECT_SOURCE_DIR}/web/flexApp)||g' CMakeLists.txt && \
	sed -i 's|add_subdirectory(${PROJECT_SOURCE_DIR}/web/oauthApp)||g' CMakeLists.txt && \
	sed -i 's|add_subdirectory(${PROJECT_SOURCE_DIR}/web/markers)||g' CMakeLists.txt && \
	sed -i 's|add_subdirectory(${PROJECT_SOURCE_DIR}/web/te-benchmark)||g' CMakeLists.txt && \
	sed -i 's|add_subdirectory(${PROJECT_SOURCE_DIR}/web/peer-server)||g' CMakeLists.txt && \
	sed -i 's|install(FILES ${PROJECT_BINARY_DIR}/web/default/libdefault${LIB_EXT} DESTINATION ${PROJECT_NAME}-bin/lib)||g' CMakeLists.txt && \
	sed -i 's|install(FILES ${PROJECT_BINARY_DIR}/web/flexApp/libflexApp${LIB_EXT} DESTINATION ${PROJECT_NAME}-bin/lib)||g' CMakeLists.txt && \
	sed -i 's|install(FILES ${PROJECT_BINARY_DIR}/web/oauthApp/liboauthApp${LIB_EXT} DESTINATION ${PROJECT_NAME}-bin/lib)||g' CMakeLists.txt && \
	sed -i 's|install(FILES ${PROJECT_BINARY_DIR}/web/markers/libmarkers${LIB_EXT} DESTINATION ${PROJECT_NAME}-bin/lib)||g' CMakeLists.txt && \
	sed -i 's|install(FILES ${PROJECT_BINARY_DIR}/web/te-benchmark/libte-benchmark${LIB_EXT} DESTINATION ${PROJECT_NAME}-bin/lib)||g' CMakeLists.txt && \
	sed -i 's|install(FILES ${PROJECT_BINARY_DIR}/web/peer-server/libpeer-server${LIB_EXT} DESTINATION ${PROJECT_NAME}-bin/lib)||g' CMakeLists.txt && \
	rm -rf web/default web/oauthApp web/flexApp web/markers web/te-benchmark web/peer-server

RUN mkdir build
WORKDIR /tmp/ffead-cpp-src/build
RUN cmake -GNinja -DSRV_EMB=on -DMOD_MEMCACHED=on -DMOD_REDIS=on -DDEBUG=on -DWITH_IOURING=on ..
RUN ninja install && \
	rm -rf /tmp/ffead-cpp-src/ffead-cpp-6.0-bin/web/t1 && \
	rm -rf /tmp/ffead-cpp-src/ffead-cpp-6.0-bin/web/t3 && \
	rm -rf /tmp/ffead-cpp-src/ffead-cpp-6.0-bin/web/t2 && \
	mv /tmp/ffead-cpp-src/ffead-cpp-6.0-bin /tmp/ffead-cpp-sql-raw-async-iouring && cd .. && rm -rf build && mkdir build

WORKDIR /tmp/ffead-cpp-src/build
RUN cmake -GNinja -DSRV_EMB=on -DMOD_MEMCACHED=on -DMOD_REDIS=on -DDEBUG=on ..
RUN ninja install && \
	rm -rf /tmp/ffead-cpp-src/ffead-cpp-6.0-bin/web/t1 && \
	rm -rf /tmp/ffead-cpp-src/ffead-cpp-6.0-bin/web/t3 && \
	rm -rf /tmp/ffead-cpp-src/ffead-cpp-6.0-bin/web/t2 && \
	mv /tmp/ffead-cpp-src/ffead-cpp-6.0-bin /tmp/ffead-cpp-sql-raw-async && cd .. && rm -rf build && mkdir build

WORKDIR /tmp/ffead-cpp-src/build
RUN cmake -GNinja -DSRV_EMB=on -DMOD_MEMCACHED=on -DMOD_REDIS=on -DDEBUG=on -DWITH_PICOEV=on ..
RUN ninja install && \
	rm -rf /tmp/ffead-cpp-src/ffead-cpp-6.0-bin/web/t1 && \
	rm -rf /tmp/ffead-cpp-src/ffead-cpp-6.0-bin/web/t3 && \
	rm -rf /tmp/ffead-cpp-src/ffead-cpp-6.0-bin/web/t2 && \
	mv /tmp/ffead-cpp-src/ffead-cpp-6.0-bin /tmp/ffead-cpp-sql-raw-async-picoev && cd .. && rm -rf build && mkdir build

WORKDIR /tmp/ffead-cpp-src/build
RUN cmake -GNinja -DSRV_EMB=on -DMOD_MEMCACHED=on -DMOD_REDIS=on -DDEBUG=on ..
RUN ninja install && \
	cp -f /tmp/ffead-cpp-src/ffead-cpp-6.0-bin/web/t3/config/cacheredis.xml /tmp/ffead-cpp-src/ffead-cpp-6.0-bin/web/t3/config/cache.xml && \
	rm -rf /tmp/ffead-cpp-src/ffead-cpp-6.0-bin/web/t1 && \
	rm -rf /tmp/ffead-cpp-src/ffead-cpp-6.0-bin/web/t2 && \
	rm -rf /tmp/ffead-cpp-src/ffead-cpp-6.0-bin/web/t4 && \
	rm -rf /tmp/ffead-cpp-src/ffead-cpp-6.0-bin/web/t5 && \
	mv /tmp/ffead-cpp-src/ffead-cpp-6.0-bin /tmp/ffead-cpp-sql-raw && cd .. && rm -rf build

COPY pico.v /tmp/pico.v
RUN wget -q https://github.com/vlang/v/releases/download/0.1.29/v_linux.zip && unzip -q v_linux.zip && cp /tmp/pico.v/picoev.v v/vlib/picoev/picoev.v && cd v && chmod +x v && ./v symlink && cd .. && rm -f v_linux.zip
WORKDIR /tmp/pico.v
RUN rm -f /usr/local/lib/libffead-* /usr/local/lib/libt3* && \
	ln -s /tmp/ffead-cpp-sql-raw/lib/libt3.so /usr/local/lib/libt3.so && \
	ln -s /tmp/ffead-cpp-sql-raw/lib/libffead-modules.so /usr/local/lib/libffead-modules.so && \
	ln -s /tmp/ffead-cpp-sql-raw/lib/libffead-framework.so /usr/local/lib/libffead-framework.so && \
	ldconfig && chmod +x *.sh && ./build-debug.sh && cp main /tmp/ && rm -f /usr/local/lib/libffead-* /usr/local/lib/libt3* main
RUN rm -f /usr/local/lib/libffead-* /usr/local/lib/libt4* /usr/local/lib/libt5* && \
	ln -s /tmp/ffead-cpp-sql-raw-async/lib/libt4.so /usr/local/lib/libt4.so && \
	ln -s /tmp/ffead-cpp-sql-raw-async/lib/libt5.so /usr/local/lib/libt5.so && \
	ln -s /tmp/ffead-cpp-sql-raw-async/lib/libffead-modules.so /usr/local/lib/libffead-modules.so && \
	ln -s /tmp/ffead-cpp-sql-raw-async/lib/libffead-framework.so /usr/local/lib/libffead-framework.so && \
	ldconfig && chmod +x *.sh && ./build-debug.sh && cp main /tmp/main_async && rm -f /usr/local/lib/libffead-* /usr/local/lib/libt4* /usr/local/lib/libt5* main

WORKDIR /

RUN chown -Rf root:root /ssd && chown -Rf postgres:postgres /ssd/postgresql && chmod 777 pipeline.lua concurrency.sh pipeline.sh query.sh

EXPOSE 9784 9785 9786 9787

RUN chmod +x *.sh && ./install_ffead-cpp.sh

RUN sed -i 's|PORT_NO=8080|PORT_NO=9784|g' /tmp/ffead-cpp-sql-raw/resources/server.prop && \
	sed -i 's|PORT_NO=8080|PORT_NO=9785|g' /tmp/ffead-cpp-sql-raw-async/resources/server.prop && \
	sed -i 's|PORT_NO=8080|PORT_NO=9786|g' /tmp/ffead-cpp-sql-raw-async-picoev/resources/server.prop && \
	sed -i 's|PORT_NO=8080|PORT_NO=9787|g' /tmp/ffead-cpp-sql-raw-async-iouring/resources/server.prop

CMD /bin/bash
